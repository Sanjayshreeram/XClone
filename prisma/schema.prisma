// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  username  String?  @unique
  bio String?
  emailVerified DateTime?
  image String?
  coverImage String?
  profileImage String?
  password  String
  hashPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followingIds String[] @db.ObjectId
  hasNotifications Boolean?
  posts    Post[]
  comments Comment[]
  notifications Notifications[]


} 

model Post {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  body String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   userId  String  @db.ObjectId   //here objectid means it will 
  user    User     @relation(fields: [userId], references: [id],onDelete: Cascade)    //when user is deleted post also will be deleted using cascade
 
  comments  Comment[]
  likedIds    String[] @db.ObjectId
}

model Comment {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  body     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
   userId   String  @db.ObjectId
  user    User     @relation(fields: [userId], references: [id],onDelete: Cascade)    //when user is deleted comment also will be deleted using cascade
 

  postId   String @db.ObjectId  //here objectid means  it will 
  post     Post     @relation(fields: [postId], references: [id])
}

model Notifications {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  body     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    userId   String  @db.ObjectId  //here userid id is refernced with user id
  user    User     @relation(fields: [userId], references: [id],onDelete: Cascade)    //when user is deleted comment also will be deleted using cascade

}